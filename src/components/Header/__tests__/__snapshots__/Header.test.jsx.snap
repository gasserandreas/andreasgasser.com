// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Header simple snapshot test 1`] = `
<CustomThemeProvider
  dark={false}
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Array [
          "320px",
          "540px",
          "720px",
          "960px",
          "1140px",
          "1400px",
        ],
        "buttons": Object {
          "link": Object {
            "&:disabled": Object {
              "backgroundColor": "inherit",
              "color": "text",
              "cursor": "not-allowed",
            },
            "&:hover": Object {
              "color": "muted",
              "cursor": "pointer",
            },
            "backgroundColor": "inherit",
            "border": "none",
            "color": "text",
            "fontSize": "0.95rem",
            "fontWeight": 400,
            "height": "2.5rem",
            "padding": "0rem 0.5rem",
            "textTransform": "uppercase",
          },
          "outline": Object {
            "&:disabled": Object {
              "backgroundColor": "inherit",
              "color": "text",
              "cursor": "not-allowed",
            },
            "&:hover": Object {
              "backgroundColor": "text",
              "color": "textInverse",
              "cursor": "pointer",
            },
            "backgroundColor": "inherit",
            "border": "1px solid #000",
            "borderColor": "text",
            "color": "text",
            "fontSize": "0.95rem",
            "fontWeight": 400,
            "height": "2.5rem",
            "padding": "0rem 0.5rem",
            "textTransform": "uppercase",
          },
        },
        "colors": Object {
          "background": "#c3c3c3",
          "backgroundInverse": "#fff",
          "error": "#E11531",
          "muted": "#595959",
          "text": "#333333",
          "textHighlighed": "#333",
          "textHover": "#7e7e7e",
          "textInverse": "#f6f6f6",
        },
        "fontSizes": Array [
          14,
          16,
          20,
          24,
          28,
          32,
          40,
          48,
          56,
          64,
        ],
        "fontWeights": Object {
          "body": 400,
          "bold": 900,
          "heading": 600,
        },
        "fonts": Object {
          "body": "Open Sans, Helvetica Neue, Helvetica, sans-serif",
          "heading": "inherit",
          "monospace": "Menlo, monospace",
        },
        "lineHeights": Object {
          "body": 1.5,
          "heading": 1.125,
        },
        "radii": Object {
          "default": "2px",
        },
        "shadows": Object {
          "card": "0 0 4px rgba(0, 0, 0, .125)",
        },
        "sizes": Object {
          "avatar": 48,
        },
        "space": Array [
          0,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
        ],
        "styles": Object {
          "root": Object {
            "fontFamily": "body",
            "fontWeight": "body",
            "lineHeight": "body",
          },
        },
        "text": Object {
          "bold": Object {
            "color": "#333333",
            "fontSize": Array [
              1,
              1,
              1,
              2,
              2,
              2,
            ],
            "fontWeight": "900",
          },
          "default": Object {
            "color": "#333333",
            "fontSize": Array [
              1,
              1,
              1,
              2,
              2,
              2,
            ],
          },
          "muted": Object {
            "color": "#595959",
            "fontSize": Array [
              1,
              1,
              1,
              2,
              2,
              2,
            ],
          },
          "page": Object {
            "color": "#333333",
            "fontSize": Array [
              4,
              4,
              4,
              5,
              5,
              5,
            ],
            "fontWeight": 600,
            "letterSpacing": "0.075rem",
            "lineHeight": "2.75rem",
            "margin": "2rem 0 2.5rem",
            "maxWidth": "32rem",
            "wordSpacing": "-0.08em",
          },
          "section": Object {
            "color": "#f6f6f6",
            "fontSize": Array [
              1,
              1,
              1,
              2,
              2,
              2,
            ],
            "fontWeight": 900,
            "letterSpacing": "2px",
            "lineHeight": "1.7rem",
            "margin": "1.5rem 0",
            "textTransform": "uppercase",
          },
          "small": Object {
            "color": "#333333",
            "fontSize": Array [
              0,
              0,
              0,
              1,
              1,
              1,
            ],
          },
          "subPage": Object {
            "color": "#595959",
            "fontSize": Array [
              2,
              2,
              2,
              3,
              3,
              3,
            ],
            "fontWeight": 500,
            "letterSpacing": "0.0625rem",
            "lineHeight": "2.2rem",
            "margin": "1.25rem 0 1.75rem",
            "marginBottom": 2,
            "maxWidth": "32rem",
          },
        },
        "variants": Object {
          "avatar": Object {
            "borderRadius": "circle",
            "height": "avatar",
            "width": "avatar",
          },
          "card": Object {
            "bg": "background",
            "boxShadow": "card",
            "p": 2,
          },
          "link": Object {
            "color": "primary",
          },
          "nav": Object {
            ":hover,:focus,.active": Object {
              "color": "primary",
            },
            "color": "inherit",
            "display": "inline-block",
            "fontSize": 1,
            "fontWeight": "bold",
            "p": 2,
            "textDecoration": "none",
          },
        },
      }
    }
  >
    <Header
      data={Object {}}
    >
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "kphPz",
                "rules": Array [
                  "box-sizing: border-box;",
                  "margin: 0;",
                  "min-width: 0;",
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-bdVaJa gtVQmG"
          >
            <Styled(Text)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "MGsuj",
                      "rules": Array [
                        "
    font-size: 1.1rem;
    font-weight: 400;
    margin-bottom: 1rem;
  ",
                      ],
                    },
                    "displayName": "Styled(Text)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <Text
                  className="sc-ifAKCX MGsuj"
                  variant="default"
                >
                  <ForwardRef
                    className="sc-ifAKCX MGsuj"
                    variant="default"
                  >
                    <styled.div
                      className="sc-ifAKCX MGsuj"
                      tx="text"
                      variant="default"
                    >
                      <StyledComponent
                        className="sc-ifAKCX MGsuj"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": false,
                              "lastClassName": "kphPz",
                              "rules": Array [
                                "box-sizing: border-box;",
                                "margin: 0;",
                                "min-width: 0;",
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        tx="text"
                        variant="default"
                      >
                        <div
                          className="sc-bdVaJa kphPz sc-ifAKCX MGsuj"
                        >
                          Hi I
                          '
                          am
                          <Styled(Link)
                            to="/"
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-EHOje",
                                    "isStatic": false,
                                    "lastClassName": "fchTcZ",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Styled(Link)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-EHOje",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              to="/"
                            >
                              <Link
                                className="sc-EHOje fchTcZ"
                                external={false}
                                to="/"
                              >
                                <Styled(mockConstructor)
                                  className="sc-EHOje fchTcZ"
                                  to="/"
                                >
                                  <StyledComponent
                                    className="sc-EHOje fchTcZ"
                                    forwardedComponent={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            Object {
                                              "children": Array [
                                                <strong>
                                                  Andreas
                                                </strong>,
                                                " ",
                                                "Gasser",
                                              ],
                                              "className": "sc-htpNat hpMhBH sc-EHOje fchTcZ",
                                              "to": "/",
                                            },
                                            Object {},
                                          ],
                                          Array [
                                            Object {
                                              "children": Array [
                                                <strong>
                                                  Andreas
                                                </strong>,
                                                " ",
                                                "Gasser",
                                              ],
                                              "className": "sc-htpNat hpMhBH sc-EHOje fchTcZ",
                                              "to": "/",
                                            },
                                            Object {},
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": <a
                                              className="sc-htpNat hpMhBH sc-EHOje fchTcZ"
                                              href="/"
                                            >
                                              <strong>
                                                Andreas
                                              </strong>
                                               
                                              Gasser
                                            </a>,
                                          },
                                          Object {
                                            "type": "return",
                                            "value": <a
                                              className="sc-htpNat hpMhBH sc-EHOje fchTcZ"
                                              href="/"
                                            >
                                              <strong>
                                                Andreas
                                              </strong>
                                               
                                              Gasser
                                            </a>,
                                          },
                                        ],
                                      }
                                    }
                                    forwardedRef={null}
                                    to="/"
                                  >
                                    <mockConstructor
                                      className="sc-htpNat hpMhBH sc-EHOje fchTcZ"
                                      to="/"
                                    >
                                      <a
                                        className="sc-htpNat hpMhBH sc-EHOje fchTcZ"
                                        href="/"
                                      >
                                        <strong>
                                          Andreas
                                        </strong>
                                         
                                        Gasser
                                      </a>
                                    </mockConstructor>
                                  </StyledComponent>
                                </Styled(mockConstructor)>
                              </Link>
                            </StyledComponent>
                          </Styled(Link)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </ForwardRef>
                </Text>
              </StyledComponent>
            </Styled(Text)>
            <Styled(Text)>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": false,
                      "lastClassName": "hoOKGH",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(Text)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <Text
                  className="sc-bZQynM hoOKGH"
                  variant="default"
                >
                  <ForwardRef
                    className="sc-bZQynM hoOKGH"
                    variant="default"
                  >
                    <styled.div
                      className="sc-bZQynM hoOKGH"
                      tx="text"
                      variant="default"
                    >
                      <StyledComponent
                        className="sc-bZQynM hoOKGH"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": false,
                              "lastClassName": "kphPz",
                              "rules": Array [
                                "box-sizing: border-box;",
                                "margin: 0;",
                                "min-width: 0;",
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        tx="text"
                        variant="default"
                      >
                        <div
                          className="sc-bdVaJa kphPz sc-bZQynM hoOKGH"
                        >
                          Front end architect
                          <br />
                          Senior software engineer
                          <br />
                          UX advocate
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </ForwardRef>
                </Text>
              </StyledComponent>
            </Styled(Text)>
          </div>
        </StyledComponent>
      </styled.div>
    </Header>
  </ThemeProvider>
</CustomThemeProvider>
`;
